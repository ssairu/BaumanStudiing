(define (derivative xs)
  (if (list? xs)
      (cond ((eq? (car xs) '+) (list '+ (derivative (cadr xs)) (if (null? (cdddr xs))
                                                                   (derivative (caddr xs))
                                                                   (derivative (cons '+ (cddr xs))))))
            ((eq? (car xs) '-) (if (null? (cddr xs))
                                   (derivative (list '* '-1 (cadr xs)))
                                   (derivative (list '+ (cadr xs) (list '* '-1 (caddr xs))))))
            ((eq? (car xs) '*) (if (null? (cdddr xs))
                                            (list '+ (list '* (derivative (cadr xs)) (caddr xs))
                                                  (list '* (derivative (caddr xs)) (cadr xs)))
                                            (list '+ (list '* (derivative (cadr xs)) (cons '* (cddr xs)))
                                                  (list '* (cadr xs) (derivative (cons '* (cddr xs)))))))
            ((eq? (car xs) 'expt) (if (number? (cadr xs))
                                      (list '* (list 'log (cadr xs)) (derivative (caddr xs)) xs)
                                      (list '* (derivative (cadr xs)) (caddr xs)
                                            (list 'expt (cadr xs) (- (caddr xs) 1)))))
            ((eq? (car xs) 'sin) (list '* (list 'cos (cadr xs)) (derivative (cadr xs))))
            ((eq? (car xs) 'cos) (list '* '-1 (list 'sin (cadr xs)) (derivative (cadr xs))))
            ((eq? (car xs) 'log) (list '/ (derivative (cadr xs)) (cadr xs)))
            ((eq? (car xs) 'exp) (list '* (derivative (cadr xs)) xs))
            ((eq? (car xs) '/) (list '/ (list '- (list '* (derivative (cadr xs)) (caddr xs))
                                              (list '* (derivative (caddr xs)) (cadr xs)))
                                     (list 'expt (caddr xs) 2))))
      (cond ((number? xs) '0)
            ((eq? xs 'x) '1))))


(display "tests")(newline)
;(newline)(newline)(newline)(newline)(newline)(newline)(newline)(newline)(newline)
(display ":::1 столбец:::") (newline)
(display (derivative '2)) (newline)
(display (derivative 'x)) (newline)
(display (derivative '(- x))) (newline)
(display (derivative '(* 1 x))) (newline)
(display (derivative '(* -1 x))) (newline)
(display (derivative '(* -4 x))) (newline)
(display (derivative '(* 10 x))) (newline)
(display (derivative '(- (* 2 x) 3))) (newline)
(display (derivative '(expt x 10))) (newline)
(display (derivative '(* 2 (expt x 5)))) (newline)
(display (derivative '(expt x -2))) (newline)
(display ":::2 столбец:::")(newline)
(display (derivative '(expt 5 x))) (newline)
(display (derivative '(cos x))) (newline)
(display (derivative '(sin x))) (newline)
(display (derivative '(exp x))) (newline)
(display (derivative '(* 2 (exp x)))) (newline)
(display (derivative '(* 2 (exp (* 2 x))))) (newline)
(display (derivative '(log x))) (newline)
(display (derivative '(* 3 (log x)))) (newline)
(display (derivative '(+ (expt x 3) (expt x 2)))) (newline)
(display (derivative '(- (* 2 (expt x 3)) (* 2 (expt x 2))))) (newline)
(display ":::3 столбец:::")(newline)
(display (derivative '(/ 3 x))) (newline)
(display (derivative '(/ 3 (* 2 (expt x 2))))) (newline)
;(define x 0)
;(display (eval (derivative '(* 2 (sin x) (cos x))) (interaction-environment))) (newline)
(display (derivative '(* 2 (sin x) (cos x)))) (newline)